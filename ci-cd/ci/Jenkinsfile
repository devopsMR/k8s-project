pipeline {
    agent any
    options {
        buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '5'))
    }
    triggers {
        pollSCM('H/2 * * * *')
    }
    environment {
        def DOCKER_TAG = "${env.BUILD_NUMBER}"
        def DOCKER_REPO_NAME = "devopsmichaelrosenbaum"
        def DOCKER_IMAGE_NAME_CONSUMER = "consumer"
        def DOCKER_IMAGE_NAME_PRODUCER = "producer"
    }
    stages {
        stage('checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/devopsMR/k8s-project.git'
            }
        }
        stage('CI - build') {
            steps {
                script {
                    try {
                        def producerDockerfilePath = 'bundle/producer'
                        def consumerDockerfilePath = 'bundle/consumer'
                        sh "docker build -t ${DOCKER_IMAGE_NAME_PRODUCER}:${DOCKER_TAG} ${producerDockerfilePath}"
                        sh "docker build -t ${DOCKER_IMAGE_NAME_CONSUMER}:${DOCKER_TAG} ${consumerDockerfilePath}"
                        sh "docker tag ${DOCKER_IMAGE_NAME_PRODUCER}:${DOCKER_TAG} ${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME_PRODUCER}:${DOCKER_TAG}"
                        sh "docker tag ${DOCKER_IMAGE_NAME_CONSUMER}:${DOCKER_TAG} ${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME_CONSUMER}:${DOCKER_TAG}"
                    } catch (Exception e) {
                        echo "An error occurred while building or tagging the Docker image: ${e.message}"
                        error("Stopping pipeline due to failure during 'build' stage.")
                    }
                }
            }
        }
        stage('CI - push') {
            steps {
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                            sh "docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}"
                            sh "docker push ${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME_PRODUCER}:${DOCKER_TAG}"
                            sh "docker push ${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME_CONSUMER}:${DOCKER_TAG}"
                        }
                    } catch (Exception e) {
                        echo "An error occurred while pushing the Docker image: ${e.message}"
                        error("Stopping pipeline due to failure during 'push' stage.")
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Remove local images created during the pipeline
                echo "CI stage clean up - remove Docker images."
                sh "docker rmi -f ${DOCKER_IMAGE_NAME_PRODUCER}:${DOCKER_TAG}"
                sh "docker rmi -f ${DOCKER_IMAGE_NAME_CONSUMER}:${DOCKER_TAG}"
                sh "docker rmi -f ${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME_PRODUCER}:${DOCKER_TAG}"
                sh "docker rmi -f ${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME_CONSUMER}:${DOCKER_TAG}"
            }
        }
        success {
            script {
                echo "Pipeline finished successfully."
            }
        }
        failure {
            script {
                // Add actions you want upon job failure, like:
                echo "Build failed! Please check the logs for more details."
            }
        }
    }
}